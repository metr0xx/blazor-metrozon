@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components;
@using Npgsql;
@using System;
@using System.Collections.Generic;
@using System.IO;
@using Microsoft.AspNetCore.Http
@using Models;

<link href='https://css.gg/search.css' rel='stylesheet'>
<link href='https://css.gg/menu.css' rel='stylesheet'>
<link href='https://css.gg/heart.css' rel='stylesheet'>
<link href='https://css.gg/shopping-cart.css' rel='stylesheet'>
<link href='https://css.gg/eye.css' rel='stylesheet'>
<link href='https://css.gg/arrow-bottom-left.css' rel='stylesheet'>


<div class="page">
    <div class=@grad_class>
        <div class="mod-menu">
            <div class="menu-col">
                <div class="seller-mod">
                    <button class="seller-mod-btn" @onclick="changeMod">покупатель</button>
                    <button class="seller-mod-btn" @onclick="changeMod">продавец</button>
                </div>
                <div class="row" style="margin-top: 1.5vh; margin-left: 3.5vw">
                    <i class="choose-mod-txt">Выберите режим</i>
                    <img src="images/downarrow.png" style="height: 4vh; width: 3vw; margin-left: 1vw;">
                </div>
            </div>
        </div>
        <div class="topbar">
            <button class="Metrozon">Metrozon</button>
            <button class="catalog"><span class="d-inline-block" style="height: 7px; width: 30px"><i class="gg-menu"></i></span>Каталог</button>
            <input class="input" placeholder="@placeholder" />
            <button class="search"><span class="d-inline-block"><i class="gg-search" style="width: 17px; height: 17px;"></i></span></button>
            <button class="liked"><span class=d-inline-block style="height: 11px; width: 22px"><i class="gg-heart" style="position: relative; z-index: 1"></i></span>Избранное</button>
        </div>
    </div>
    
    @if (buyermod)
    {   
        <div class="row" style="margin-left: 0.5vw; margin-top: 1vh; height: 100vh">
            @for (int i = 0; i < products.Count; i++)
            {
                <div class="row" style="margin-left: 1vw; margin-top: 2vh">
                    <button class="card">
                        <div class="container">

                            <p><img src="images/noph.png" width="270" height="220"></p>
                            <h5><b>@formatString(products[i].Title)</b></h5>
                            <h5><b>@products[i].Price ₽</b></h5>
                            <h6>Осталось @products[i].Amount шт.</h6>

                        </div>
                    </button>

                    <div class="card-button-col">
                        <button class="card-button" title="Добавить в избранное"><span class=d-inline-block><i class="gg-heart"></i></span></button>
                        <button class="card-button" title="Добавить в корзину"><span class=d-inline-block><i class="gg-shopping-cart"></i></span></button>
                        <button class="card-button" title="Посмотреть похожее"><span class=d-inline-block><i class="gg-eye"></i></span></button>
                    </div>

                </div>
            }
            
        </div>
        <div class=@bag_class>
            <div class="row">
                <button class="bag" @onclick="animateBag">
                    <div class="d-inline-block">
                        <div class="row" style="right: 50%">
                            <img src="images/leftarrow.png" style="height: 4vh; width: 2vw">
                            <img src="images/shopping-basket.png" style="height: 4vh; width: 2vw">
                        </div>
                    </div>
                </button>
                <div class="bag-inside"></div>
            </div>
        </div>
    }
    else
    {
        if (userProducts.Count() == 0)
        {
            <div>
                У вас пока нет размещенных товаров.
                Нажмите<button>здесь</button>, чтобы разместить товар
            </div>
        }
        else
        {
            <h2 class="seller-mod-header">Ваши товары</h2>
            foreach (var product in userProducts)
            {
                <div class="product-list">
                    <div class="product-row">
                        <img src="images/noph.png" width="100" height="80">
                        @product.Title, @product.Price ₽ (@product.Amount Шт.) @product.Description
                        <button @onclick="@(e => toggleShowDialog(true, product.Product_id))">Изменить</button>
                        <button @onclick="@(e => deleteProduct(product.Product_id))">X</button>
                    </div>
                </div>
            }
            <button class="add-product-btn" @onclick="@(e => toggleShowDialog(false))">Добавить новый товар</button>
        }
        if (showDialog)
        {  
            <div class="new-product-dialog">
                
                <div class="input-col">
                    <div class="input-line">
                        <div class="input-hint">Название товара</div>
                        <input class="input-prod-info" @bind="@newproduct_name" @oninput="@((e) => { try { newproduct_name=(string)e.Value;} catch {}})">
                    </div>
                    <div class="input-line">
                        <div class="input-hint">Стоимость товара</div>
                        <input class="input-prod-info" @bind="@newproduct_price" @oninput="@((e) => { try {newproduct_price=(int)e.Value;} catch {}})">
                    </div>
                    <div class="input-line">
                            <div class="input-hint">Количество (шт)</div>
                            <input class="input-prod-info" @bind="@newproduct_amount" @oninput="@((e) => { try {newproduct_amount=(int)e.Value;} catch {}})">

                        </div>

                        <div class="input-line">
                            <div class="input-hint">Категория</div>
                            <select @bind="@categoryId" class="categoryList">
                                @foreach (var category in categories)
                                {
                                    <option value="@category.Id" class="">@category.Name</option>
                                }
                            </select>

                        </div>

                        <div class="input-line">
                            <div class="input-hint">Описание</div>
                            <textarea class="input-prod-info" @bind="@newproduct_description" @oninput="@((e) => { try {newproduct_description=(string)e.Value;} catch {}})"></textarea>

                        </div>

                        <button class="add-product-btn-up" @onclick="@(e => saveNewProductData(newProductButtonTitle == "Изменить"))">@newProductButtonTitle</button>

                    </div>
                </div>
               
                }
    }
</div>

@code {
    static List<Product> products = PostgresConnection.ShowProducts();
    static User user = new User(1, "Mikle", "Frolov", 1200, "88005553535", "abobz@aboba.com", "12345");
    int state = 0;
    bool buyermod = true;
    bool showDialog = false;
    string[] statements = { "bag-animate-left", "bag-animate-right" };
    string bag_class = "bag-no-animate";
    string grad_class = "grad";
    List<Product> userProducts = new List<Product>(fillUserProducts());
    List<Category> categories = new List<Category>(PostgresConnection.GetCategories());
    string placeholder = "Введите название товара";
    string newproduct_name;
    int newproduct_price;
    int newproduct_amount;
    string newproduct_description;
    int categoryId;
    int newProductId;
    string newProductButtonTitle = "";

    public void animateBag()
    {
        bag_class = statements[state++ % 2];
    }

    private void changeMod()
    {
        if (buyermod)
        {
            buyermod = false;
            grad_class = "grad-sell-mod";
            placeholder = "Поиск по вашим товарам";
        }
        else
        {
            buyermod = true;
            bag_class = "bag-no-animate";
            grad_class = "grad";
            placeholder = "Введите название товара";
        }
    }

    private void toggleShowDialog(bool changed, int product_id = 0)
    {
        newProductId = product_id;
        newProductButtonTitle = changed ? "Изменить" : "Добавить";
        showDialog = !showDialog;
        categoryId = 0;
        newproduct_amount = 0;
        newproduct_price = 0;
        newproduct_name = "";
        newproduct_description = "";
    }

    private static List<Product> fillUserProducts()
    {
        List<Product> userProducts = new List<Product>();
        foreach (var product in products)
        {
            if (product.Seller_id == user.User_id)
            {
                userProducts.Add(product);
            }
        }
        return userProducts;
    }
    
    private List<Product> fillBag()
    {
        List<Product> productsInBag = new List<Product>();
        // bag filling
        return productsInBag;
    }

    private async Task saveNewProductData(bool changed, int product_id = 0)
    {   
        showDialog = false;
        if (changed)
        {
            await PostgresConnection.ChangeProduct(
                newProductId,
                categoryId,
                newproduct_amount,
                newproduct_price,
                newproduct_name,
                newproduct_description);
            products = PostgresConnection.ShowProducts();
            userProducts = fillUserProducts();
        }
        else
        {
            await PostgresConnection.AddProduct(
                user.User_id,
                categoryId,
                newproduct_amount,
                newproduct_price,
                newproduct_name,
                newproduct_description);
            products = PostgresConnection.ShowProducts();
            userProducts.Add(products[products.Count - 1]);
        }
        categoryId = 0;
        newproduct_amount = 0;
        newproduct_price = 0;
        newproduct_name = "";
        newproduct_description = "";
    }

    private async Task deleteProduct(int product_id)
    {
        await PostgresConnection.DeleteProduct(product_id);
        products = PostgresConnection.ShowProducts();
        userProducts = fillUserProducts();
    }

    public string formatString(string str)
    {
        if (str.Length > 20)
        {
            return str.Substring(0, 21) + "...";
        }
        return str;
    }

}


